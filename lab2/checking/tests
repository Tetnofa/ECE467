#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include "utilities.h"  // DO NOT REMOVE this line
#include "implementation_reference.h"   // DO NOT REMOVE this line

struct print{
    unsigned height;
    unsigned width;
};

unsigned char* mainframe;
unsigned char* bounds;
unsigned dimension;
bool created_bounding;
unsigned initial_pin_row, initial_pin_col;
unsigned initial_bw, initial_bh;


#define PIXELSIZE 3
#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))
#define ABS(X) (((X) > (0)) ? (X) : (-1*X))

void bounding_box() {
    unsigned char* white_line = allocateFrame(1, dimension);
    int mincol = dimension-1, maxcol = 0, maxrow = 0;
    bool found_mr = false;
    bool do_memset = true;

    memset(white_line, 0xFF, 3*dimension);
    
    for (int row = 0; row < dimension; row++) {
        if (do_memset && memcmp(&mainframe[row*dimension*3], white_line, 3*dimension) == 0){
            continue;
        }
        else if (!found_mr){
            initial_pin_row = row;
            found_mr = true;
            maxrow = row;
            do_memset = false;
        }
        else{
            maxrow = row;
            do_memset = false;
        }
        int column;
        int count = 0;
        for (column = 0; column <= dimension - 4; column += 4) {
            int pos_0 = 3 * (row * dimension + column);
            int pos_1 = 3 * (row * dimension + (column + 1));
            int pos_2 = 3 * (row * dimension + (column + 2));
            int pos_3 = 3 * (row * dimension + (column + 3));

            if ((mainframe[pos_0] & mainframe[pos_0 + 1] & mainframe[pos_0 + 2]) != 255) {
                mincol = MIN(mincol, column);
                maxcol = MAX(maxcol, column);
            } else{
                count += 1;
            }
            if ((mainframe[pos_1] & mainframe[pos_1 + 1] & mainframe[pos_1 + 2]) != 255) {
                mincol = MIN(mincol, column + 1);
                maxcol = MAX(maxcol, column + 1);
            } else{
                count += 1;
            }
            if ((mainframe[pos_2] & mainframe[pos_2 + 1] & mainframe[pos_2 + 2]) != 255) {
                mincol = MIN(mincol, column + 2);
                maxcol = MAX(maxcol, column + 2);
            } else{
                count += 1;
            }
            if ((mainframe[pos_3] & mainframe[pos_3 + 1] & mainframe[pos_3 + 2]) != 255) {
                mincol = MIN(mincol, column + 3);
                maxcol = MAX(maxcol, column + 3);
            } else{
                count += 1;
            }
        }
        for (; column < dimension; column++) {
            int pos = 3 * (row * dimension + column);
            if ((mainframe[pos] & mainframe[pos + 1] & mainframe[pos + 2]) != 255) {
                mincol = MIN(mincol, column);
                maxcol = MAX(maxcol, column);
            } else{
                count += 1;
            }
        }
        if(count == dimension){
            do_memset = true;
        }
    }
    initial_pin_col = mincol;
    initial_bh = 1 + maxrow - initial_pin_row;
    initial_bw = 1 + maxcol - mincol;
    deallocateFrame(white_line);
    return ;
}

void generate_bounds(){
    bounds = allocateFrame(initial_bw, initial_bh);
    for (int row = initial_pin_row; row < initial_pin_row + initial_bh; row++) {
        int source_index = 3 * (row * dimension + initial_pin_col); 
        int position_rendered_frame = 3 * ((row-initial_pin_row)*initial_bw); 
        memcpy(&bounds[position_rendered_frame], &mainframe[source_index], 3 * initial_bw);
    }
}
void clean_frame(struct print *prints, unsigned pin_row, unsigned pin_col, unsigned prints_index){
    unsigned bw, bh;
    bw = prints[prints_index].width;
    bh = prints[prints_index].height;
    for(int i = pin_row; i < pin_row + bh; i++){
        memset(&mainframe[3*((i * dimension)+pin_col)], 0xFF, bw*3);
    }
}

void generate_frame(struct print *prints, unsigned pin_row, unsigned pin_col, unsigned prints_index){
    unsigned width = dimension, bw, bh;
    bw = prints[0].width;
    bh = prints[0].height;
    if (prints_index == 0){
        for (int i = 0; i < bh; i++) {
            int source_index = 3 * (i * bw); 
            int position_rendered_frame = 3 * ((pin_row + i) * width + pin_col); 
            memcpy(&mainframe[position_rendered_frame], &bounds[source_index], 3 * bw);
        }

    } else if (prints_index == 1) {
        for (int i = 0; i < bh; i++) {
            for (int j = 0; j < bw; j++) {
                int source_index = 3 * (i * bw + j);
                int position_rendered_frame = 3 * ((pin_row + j) * width + (pin_col + (bh - i - 1)));
                mainframe[position_rendered_frame] = bounds[source_index];
                mainframe[position_rendered_frame + 1] = bounds[source_index + 1];
                mainframe[position_rendered_frame + 2] = bounds[source_index + 2];
            }
        }
    } else if (prints_index == 2) {
        for (int i = 0; i < bh; i++) {
            for (int j = 0; j < bw; j++) {
                int source_index = 3 * (i * bw + j);
                int position_rendered_frame = 3 * ((pin_row + (bh - i - 1)) * width + (pin_col + (bw - j - 1)));
                mainframe[position_rendered_frame] = bounds[source_index];
                mainframe[position_rendered_frame + 1] = bounds[source_index + 1];
                mainframe[position_rendered_frame + 2] = bounds[source_index + 2];
            }
        }
    } else if (prints_index == 3) {
        for (int i = 0; i < bh; i++) {
            for (int j = 0; j < bw; j++) {
                int source_index = 3 * (i * bw + j);
                int position_rendered_frame = 3 * ((pin_row + (bw - j - 1)) * width + (pin_col + i));
                mainframe[position_rendered_frame] = bounds[source_index];
                mainframe[position_rendered_frame + 1] = bounds[source_index + 1];
                mainframe[position_rendered_frame + 2] = bounds[source_index + 2];
            }
        }
    } else if (prints_index == 4) {
        for (int i = 0; i < bh; i++) {
            for (int j = 0; j < bw; j++) {
                int source_index = 3 * (i * bw + j);
                int position_rendered_frame = 3 * ((pin_row + i) * width + (pin_col + (bw - j - 1)));
                mainframe[position_rendered_frame] = bounds[source_index];
                mainframe[position_rendered_frame + 1] = bounds[source_index + 1];
                mainframe[position_rendered_frame + 2] = bounds[source_index + 2];
            }
        }
    } else if (prints_index == 5) {
        for (int i = 0; i < bh; i++) {
            for (int j = 0; j < bw; j++) {
                int source_index = 3 * (i * bw + (bw - j - 1));
                int position_rendered_frame = 3 * ((pin_row + (bw - j - 1)) * width + (pin_col + i));
                mainframe[position_rendered_frame] = bounds[source_index];
                mainframe[position_rendered_frame + 1] = bounds[source_index + 1];
                mainframe[position_rendered_frame + 2] = bounds[source_index + 2];
            }
        }
    } else if (prints_index == 6) {
        for (int i = 0; i < bh; i++) {
            int source_index = 3 * (i * bw); 
            int position_rendered_frame = 3 * ((pin_row + bh - i - 1) * width + pin_col); 
            memcpy(&mainframe[position_rendered_frame], &bounds[source_index], 3 * bw);
        }

    } else if (prints_index == 7) {
        for (int i = 0; i < bh; i++) {
            for (int j = 0; j < bw; j++) {
                int source_index = 3 * (i * bw + (bw - j - 1));
                int position_rendered_frame = 3 * ((pin_row + j) * width + (pin_col + (bh - i - 1)));
                mainframe[position_rendered_frame] = bounds[source_index];
                mainframe[position_rendered_frame + 1] = bounds[source_index + 1];
                mainframe[position_rendered_frame + 2] = bounds[source_index + 2];
            }
        }
    }
}


/***********************************************************************************************************************
 * WARNING: Do not modify the implementation_driver and team info prototype (name, parameter, return value) !!!
 *          Do not forget to modify the team_name and team member information !!!
 **********************************************************************************************************************/
void print_team_info(){
    // Please modify this field with something interesting
    char team_name[] = "default-name";

    // Please fill in your information
    char student_first_name[] = "Aman";
    char student_last_name[] = "Patra";
    char student_student_number[] = "1007301420";

    // Printing out team information
    printf("*******************************************************************************************************\n");
    printf("Team Information:\n");
    printf("\tteam_name: %s\n", team_name);
    printf("\tstudent_first_name: %s\n", student_first_name);
    printf("\tstudent_last_name: %s\n", student_last_name);
    printf("\tstudent_student_number: %s\n", student_student_number);
}

/***********************************************************************************************************************
 * WARNING: Do not modify the implementation_driver and team info prototype (name, parameter, return value) !!!
 *          You can modify anything else in this file
 ***********************************************************************************************************************
 * @param sensor_values - structure stores parsed key value pairs of program instructions
 * @param sensor_values_count - number of valid sensor values parsed from sensor log file or commandline console
 * @param frame_buffer - pointer pointing to a buffer storing the imported  24-bit bitmap image
 * @param width - width of the imported 24-bit bitmap image
 * @param height - height of the imported 24-bit bitmap image
 * @param grading_mode - turns off verification and turn on instrumentation
 ***********************************************************************************************************************
 *
 **********************************************************************************************************************/
void implementation_driver(struct kv *sensor_values, int sensor_values_count, unsigned char *frame_buffer,
                           unsigned int width, unsigned int height, bool grading_mode) {

    int processed_frames = 0;
    initial_pin_row = 0, initial_pin_col = 0;
    mainframe = frame_buffer;
    dimension = width;
    bool is_mirrored = 0;
    created_bounding = false;
    bounding_box();
    unsigned int bw = initial_bw, bh = initial_bh;

    struct print prints[8];
    for(int i = 0; i < 8; i+=2){
        prints[i].height = bh;
        prints[i].width = bw;
        prints[i+1].height = bw;
        prints[i+1].width = bh;
    }
    unsigned initial_prints_index = 0;
        
    int batch_size = 5;  // Number of frames to process at a time
    int actions_per_frame = 25;  // Number of actions per frame

    int total_frames = (sensor_values_count + actions_per_frame - 1) / actions_per_frame;  // Total number of frames

    // Initialize cumulative state for the entire process
    int pin_row = initial_pin_row;
    int pin_col = initial_pin_col;
    int prints_index = initial_prints_index;
    // int pr[5], pc[5], pi[5];
    while (processed_frames < total_frames) {
        int current_batch_frames = (total_frames - processed_frames > batch_size) ? batch_size : (total_frames - processed_frames);

        // Process sensor values for the current batch
        for (int frame = 0; frame < current_batch_frames; frame++) {
            int last_pin_row = pin_row;
            int last_pin_col = pin_col;
            int last_prints_index = prints_index + 4*is_mirrored;
            for (int action = 0; action < actions_per_frame && (processed_frames * actions_per_frame + frame * actions_per_frame + action) < sensor_values_count; action++) {
                int sensorValueIdx = processed_frames * actions_per_frame + frame * actions_per_frame + action;
                char *key = sensor_values[sensorValueIdx].key;
                int value = sensor_values[sensorValueIdx].value;

                if (!strcmp(key, "W")) {
                    pin_row -= value;
                } else if (!strcmp(key, "A")) {
                    pin_col -= value;
                } else if (!strcmp(key, "S")) {
                    pin_row += value;
                } else if (!strcmp(key, "D")) {
                    pin_col += value;
                } else if (!strcmp(key, "MX")) {
                    pin_row = dimension - prints[prints_index].height - pin_row;
                    is_mirrored ^= 1;
                    prints_index = (prints_index + 2) % 4;
                } else if (!strcmp(key, "MY")) {
                    pin_col = dimension - prints[prints_index].width - pin_col;
                    is_mirrored ^= 1;
                }

                bool flip = (value < 0);
                value = ABS(value) % 4;

                if (value == 3) {
                    flip = !flip;
                    value = 1;
                }

                if (value == 2 && (!strcmp(key, "CW") || !strcmp(key, "CCW"))) {
                    pin_row = height - prints[prints_index].height - pin_row;
                    pin_col = width - prints[prints_index].width - pin_col;
                    prints_index = (prints_index + 2) % 4;
                } else if (value == 1) {
                    bool rotateCW = (!strcmp(key, "CW") && flip == 0) || (!strcmp(key, "CCW") && flip == 1);
                    bool rotateCCW = (!strcmp(key, "CCW") && flip == 0) || (!strcmp(key, "CW") && flip == 1);

                    if (rotateCW) {
                        int temp_row = pin_row;
                        pin_row = pin_col;
                        pin_col = height - temp_row - prints[prints_index].height;
                        prints_index = (prints_index + (is_mirrored ? 3 : 1)) % 4;
                    } else if (rotateCCW) {
                        int temp_col = pin_col;
                        pin_col = pin_row;
                        pin_row = width - temp_col - prints[prints_index].width;
                        prints_index = (prints_index + (is_mirrored ? 1 : 3)) % 4;
                    }
                }
            }
            if(pin_row == last_pin_row && pin_col == last_pin_col && prints_index == last_prints_index){
                verifyFrame(frame_buffer, width, height, grading_mode);
            }
            else{
                
                if (!created_bounding){
                    created_bounding = true;
                    generate_bounds();
                }
                clean_frame(prints, last_pin_row, last_pin_col, last_prints_index);
                generate_frame(prints, pin_row, pin_col, prints_index + 4 * is_mirrored);
                verifyFrame(frame_buffer, width, height, grading_mode);
            }
            // pr[frame] = pin_row;
            // pc[frame] = pin_col;
            // pi[frame] = prints_index;
            // Generate the frame based on the final state after processing the actions for this frame
        }
        // generate_frames(prints, pr, pc, pi, current_batch_frames);
        // for(int i = 0 ; i < current_batch_frames; i++){
        //     verifyFrame(frame_buffer[i], width, height, grading_mode);
        // }
        // clean_frames(prints, pr, pc, pi, current_batch_frames);

        // Update the number of processed frames
        processed_frames += current_batch_frames;
    }


    if (created_bounding){
        deallocateFrame(bounds);
    }
    return;

}

int x() { 
  foo x = 5 *; 
}

#include "scio.h"

int x;
bool     flag 
    ;

bool dowork2 (        bool    
        foo, int                     



        baz);

int dowork( bool dostuff, int       value  , bool debog);

int dowork (bool dostuff, int value, vool debogg)      {

    if (dostuff == debogg) return 99;
    else return 98;
                            }
bool dowork2 (bool foo, int        baz){if (foo) return -baz > 0;          else if (foo && baz >= 67) return baz <= -44; else return baz < 44 || baz == 57;}

bool isthisallowed;

int main()
{
    int _invalidident = 9;
    int 0invalidid = 1;
    int negnum = -4;
    int valid998_id_invalid_value = 09;
    bool Valid_________ID9 = false;
        int arr1[8];
        bool allowed_name                        [10];
    double shouldfail = 9.3;
    bool troo = true;
    while ( troo        ){
        bool ntroo = !troo ;
        int a = 1;
    int b = 1;        
        int c;
        c= a < b;
        c        = a <=b;
        c=a>b;
        c= a >= b;
        ntroo = a == b;
        ntroo = ntroo && ntroo;
    troo = troo || troo;
            
    bool assign_FUNC00 = dowork2 ( true , 33 ) ;

    troo = false;
    }

    if ( 5 == 2 ) { troo = true; }
    else negnum = 88;

    int funcret = dowork(true,    9   , true  );
    return             
        ;
}

#include "bad.h"
#include "scio.h"

bool boul = true;
bool b_ool = -true;
bool 4_bool = false;
bool __invalid_id = -false;

int eent = 2873;
int i_n_t_ = -2233;
int _invalid = 234234234234;
int 1_missing_semicolon = -4434

bool arr[5];
bool a__arrayyyeyye[4];
int __array[222222];
int intarr[3];
int negativearray[-5];

bool func3();
int func4(int arr55[], bool __badparam, bool troo);

int func1(int iters, bool flag)
{
    while ((iters > -44 + 3*(intarr[2]) - -(-4)) || ((((((iters >= 67) && (iters > 4) && ((iters <= 100) || iters < 101))))) || iters != 2)
    {
        flag = !flag;
        iters = iters + (-3);
        iters = iters - 1;
    }
    return iters + 99 - 33 + (-22);
}

bool func2(int num, int arr[], bool flag, bool flags[])
{
    while(func1(num, flag) > arr[3] || flags[4]){   flags[num] = flags[num-1] && true || false;    }
    while(true) num = -num;
    return num >= arr[7];
}

int main()
{
    if (func2(5, intarr, true, arr)) return func1(5, false);
    else return 0;
}